import os

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from config import dp, bot, db
from aiogram import types
import naim.normal as normal
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from naim.start_bot import buttons_start_02
from handlers import bosses
from menu import sort_the
import handlers.auxiliary_functions as af
from files.icons import icons
from waiters import waiter_start as w_start


@dp.message_handler(lambda message: message.text is not None and not message.text.startswith('/'))
async def handle_messages(message: types.Message):
    user = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_state = db.get_temp_users_state(message.from_user.id)
    if user_state == 'dont_like_to_eat':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        products = normal.normal_list(message.text)
        text = "<b>–≠—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—à—å –≤ –ø–∏—â—É:</b>\n"
        text += (f"<code>{products}</code>\n"
                 "\n"
                 "–í—Å—ë –≤–µ—Ä–Ω–æ?")
        db.set_temp_users_dont_like_to_eat(user, products)
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        db.update_logging_session_dislike(str(user), products)
        await bot.delete_message(chat_id=user, message_id=message.message_id)
        await bot.edit_message_text(chat_id=user, message_id=db.get_users_temp_message_id(user)[0], text=text, reply_markup=create_confirmation_buttons())
    elif user_state == 'like_to_eat':
        products = normal.normal_list(message.text)
        text = "<b>–≠—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å:</b>\n"
        text += (f"<code>{products}</code>\n"
                 "\n"
                 "–í—Å—ë –≤–µ—Ä–Ω–æ?")
        db.set_temp_users_like_to_eat(user, products)
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        db.update_logging_session_like(str(user), products)
        await bot.delete_message(chat_id=user, message_id=message.message_id)
        await bot.edit_message_text(chat_id=user, message_id=db.get_users_temp_message_id(user)[0], text=text,
                                    reply_markup=create_confirmation_buttons2())
    elif user_state == 'boss':
        if message.text == '123456':
            await bot.delete_message(chat_id=user, message_id=db.get_users_temp_message_id(user)[0])
            await bot.delete_message(chat_id=user, message_id=message.message_id)
            await bosses.generate_boss_menu(user)
        else:
            await bot.delete_message(user, message_id=message.message_id)
            try:
                await bot.edit_message_text(chat_id=user, message_id=db.get_users_temp_message_id(user)[0], text='–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:')
            except Exception as e:
                print(e)

    elif user_state == 'review':
        dish = message.text
        await bot.delete_message(chat_id=user, message_id=message.message_id)
        dish_id = db.restaurants_get_dish(dish)[0]
        db.set_temp_users_dish_id(user, dish_id)
        await choose_dish(dish_id, message)

    elif user_state == 'review_end':
        user_first_name = db.get_users_user_first_name(user)
        await bot.delete_message(chat_id=user, message_id=message.message_id)
        await bot.edit_message_text(chat_id=user,
                                    message_id=db.get_users_temp_message_id(user)[0],
                                    text=f"<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! ü§úü§õ</b>",
                                    reply_markup=buttons_02()
                                    )
    elif user_state == 'waiter_password' and message.text == '123456':
        idd = db.get_users_temp_message_id(user)[0]
        await bot.delete_message(user, message.message_id)
        message_obj = await bot.edit_message_text(
            chat_id=user,
            message_id=idd,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
                 "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        db.set_temp_users_state(user, 'waiter_reg')
        db.set_temp_users_message_id(user, message_obj.message_id)

    elif user_state == 'waiter_reg':
        await w_start.start(message)
    elif user_state == 'get_order':
        if '¬ª' not in message.text:
            try:
                remark = message.text
                client_id = eval(db.get_waiter_score(user))[-1]
                await bot.delete_message(chat_id=user, message_id=message.message_id)
                await w_start.save_remark(user, client_id, remark)
                await w_start.set_order(user, client_id)

            except Exception as e:
                print("remark error: ", e)
        else:
            dish = message.text
            await bot.delete_message(chat_id=user, message_id=message.message_id)
            dish_id = db.restaurants_get_dish(dish)[0]
            await w_start.dish_added(user, dish_id)

    elif user_state == 'order_table':
        await bot.delete_message(chat_id=user, message_id=message.message_id)
        await w_start.order_accepted(user, eval(db.get_waiter_score(user))[-1], message.text)
    else:
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    phone = message.contact.phone_number
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.from_user.id, message_id=db.get_users_temp_message_id(message.from_user.id)[0])
    db.set_users_phone(message.from_user.id, phone)
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–µ—Å—Å–∏–∏
    db.update_logging_session_phone(str(message.from_user.id), phone)
    mes = await message.answer("–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É... ‚è≥", reply_markup=types.ReplyKeyboardRemove())
    await bot.delete_message(chat_id=message.from_user.id, message_id=mes.message_id)
    await message.answer(text="–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.", reply_markup=create_web_app_button())

@dp.message_handler(commands=['waiter'])
async def waiter(message: types.Message):
    user = message.from_user.id
    await bot.delete_message(user, message.message_id)
    if not db.check_waiter_exists(user):
        message_obj = await bot.send_message(
            chat_id=user,
            text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ",
        )
        db.set_temp_users_state(user, 'waiter_password')
        db.set_temp_users_message_id(user, message_obj.message_id)
    else:
        text = f'\n–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–∞—Å—å) –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç'
        await bot.send_message(user, text)


@dp.message_handler(commands=['kbzhu'])
async def kbzhu(message: types.Message):
    user = message.from_user.id
    message = message.message_id
    mes = db.get_users_temp_message_id(user)
    await bot.delete_message(chat_id=user, message_id=message)
    try:
        await bot.delete_message(chat_id=user, message_id=mes[0])
    except Exception as e:
        print(e)
    dish, length, numb = sort_the.get_dish(user)
    kb = dish['–ö–ë–ñ–£']

    try:
        message_obj = await bot.send_message(user,
                                                 f"üìù–ö–ë–ñ–£ –±–ª—é–¥–∞ :\n <tg-spoiler><i>{kb}</i></tg-spoiler>\n",
                                                 reply_markup=return_after_dish_info())
    except:
        message_obj = await bot.send_message(user,
                                             f"üìù–ú—ã –ø–æ–∫–∞ –Ω–µ –æ–±–ª–∞–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ö–ë–ñ–£ –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞\n",
                                             reply_markup=return_after_dish_info())
    db.set_temp_users_message_id(user, message_obj.message_id)


@dp.message_handler(commands=['com'])
async def com(message: types.Message):
    user = message.from_user.id
    message = message.message_id
    mes = db.get_users_temp_message_id(user)
    await bot.delete_message(chat_id=user, message_id=message)
    await bot.delete_message(chat_id=user, message_id=mes[0])
    dish, length, numb = sort_the.get_dish(user)
    if dish['–û–ø–∏—Å–∞–Ω–∏–µ']:
        message_obj = await bot.send_message(user,
                                             f"<blockquote><i>üë®üèº‚Äç‚öïÔ∏è: {dish['–û–ø–∏—Å–∞–Ω–∏–µ'].split(';')[0]}</i></blockquote>\n\n",
                                             reply_markup=return_after_dish_info())
    else:
        message_obj = await bot.send_message(user,
                                             f"<blockquote><i>üë®üèº‚Äç‚öïÔ∏è: {dish['–û–ø–∏—Å–∞–Ω–∏–µ']}</i></blockquote>\n\n",
                                             reply_markup=return_after_dish_info())
    db.set_temp_users_message_id(user, message_obj.message_id)



@dp.message_handler(commands=['sostav'])
async def com(message: types.Message):
    user = message.from_user.id
    message = message.message_id
    mes = db.get_users_temp_message_id(user)
    await bot.delete_message(chat_id=user, message_id=message)
    try:
        await bot.delete_message(chat_id=user, message_id=mes[0])
    except Exception as e:
        print(e)
    dish, length, numb = sort_the.get_dish(user)

    if dish['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'] is not None:
        message_obj = await bot.send_message(user,
                                             text=f"üìù–°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ :\n <i>{', '.join(dish['–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']).capitalize()}</i>\n",
                                             reply_markup=return_after_dish_info())
    else:
        message_obj = await bot.send_message(user,
                                             text=f"üìù–°–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ :\n <i>{str(db.get_dish_simple_sostav(dish['–†–µ—Å—Ç–æ—Ä–∞–Ω'], dish['–ù–∞–∑–≤–∞–Ω–∏–µ'])).capitalize()}</i>\n",
                                             reply_markup=return_after_dish_info())
    db.set_temp_users_message_id(user, message_obj.message_id)


def return_after_dish_info():
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="return_to_dishes"))


@dp.callback_query_handler(text_contains=f"return_to_dishes")
async def return_to_dishes(call: types.CallbackQuery):
    user = call.from_user.id
    await call.answer()
    dish, length, numb = sort_the.get_dish(user)
    dish_id = db.get_temp_users_dish_id(user)
    size_list = dish['–†–∞–∑–º–µ—Ä']
    photo_dir = '/Users/artemijpetrov/PycharmProjects/koreanchickdouble/chick'

    all_files = {os.path.splitext(file)[0]: os.path.join(photo_dir, file) for file in os.listdir(photo_dir)}
    shemodi_dish_photo = False
    photo_shemodi = ''
    for j in all_files:
        if j in dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] or dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] in j:
            shemodi_dish_photo = True
            photo_shemodi = j
    if size_list:
        size_list = eval(size_list)
    if db.check_basket_exists(user):
        basket = eval(db.get_basket(user))
        if dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] in basket:
            in_basket = True
            quantity = basket[dish['–ù–∞–∑–≤–∞–Ω–∏–µ']][1]
        else:
            in_basket = False
            quantity = 0
    else:
        in_basket = False
        quantity = 0
    if shemodi_dish_photo or (dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] in all_files and dish['–†–µ—Å—Ç–æ—Ä–∞–Ω'] == '–ú–æ–ª–æ–¥—ë–∂—å'):
        if shemodi_dish_photo:
            file_path = all_files[photo_shemodi]
        else:
            file_path = all_files[dish['–ù–∞–∑–≤–∞–Ω–∏–µ']]
        if os.path.isfile(file_path):
            await bot.delete_message(chat_id=user, message_id=call.message.message_id)
            text = af.generate_dish_text(user, icons, dish, length, numb, dish_id)
            message_obj = await bot.send_photo(user, open(file_path, 'rb'),
                                               caption=text,
                                               reply_markup=buttons_food_05(dish_id,
                                                                          db.get_client_temp_dish(user),
                                                                            length, numb, in_basket,
                                                                            bool(db.get_qr_scanned(user)), quantity,
                                                                            size_list, user))
            db.set_temp_users_message_id(user, message_obj.message_id)

# ======================================================================================================================
# ===== –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä =================================================================================================
# ======================================================================================================================

def create_confirmation_buttons():
    menu = InlineKeyboardMarkup(row_width=2)
    btn1 = InlineKeyboardButton(text="–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ üëçüèª",
                                callback_data="blacklist_yes")

    btn2 = InlineKeyboardButton(text="–ù–µ—Ç! –ü–µ—Ä–µ–ø–∏—à—É üëéüèª",
                                callback_data="blacklist_no")

    menu.row(btn1, btn2)

    return menu


def create_confirmation_buttons2():
    menu = InlineKeyboardMarkup(row_width=2)
    btn1 = InlineKeyboardButton(text="–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ üëçüèª",
                                callback_data="whitelist_yes")

    btn2 = InlineKeyboardButton(text="–ù–µ—Ç! –ü–µ—Ä–µ–ø–∏—à—É üëéüèª",
                                callback_data="whitelist_no")

    menu.row(btn1, btn2)

    return menu


def create_web_app_button():
    webapp_keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    webapp_keyboard.add(
        KeyboardButton(
            text="–û—Ç–∫—Ä—ã—Ç—å WebApp",
            url='http://t.me/koreanchickbot/F2M'
        )
    )
    return webapp_keyboard


async def choose_dish(dish_id, message: types.Message):
    user = message.from_user.id
    if db.get_users_ban(user):
        return None

    # –î–µ–π—Å—Ç–≤–∏–µ:
    dish = db.restaurants_get_by_id(dish_id)

    message_obj = await bot.edit_message_text(
        chat_id=user,
        message_id=db.get_users_temp_message_id(user)[0],
        text=f"üí´ –ë–ª—é–¥–æ:\n"
             f"<i>¬´{dish[2]}¬ª</i>\n"
             f"\n"
             f"–û—Ü–µ–Ω–∏—Ç–µ –±–ª—é–¥–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 üëáüèª",
        reply_markup=buttons_04(dish_id)
    )


def buttons_04(dish_id):
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="1 ‚≠ê",
                                callback_data=f"review_stat_1_{dish_id}")

    btn2 = InlineKeyboardButton(text="2 ‚≠ê",
                                callback_data=f"review_stat_2_{dish_id}")

    btn3 = InlineKeyboardButton(text="3 ‚≠ê",
                                callback_data=f"review_stat_3_{dish_id}")

    btn4 = InlineKeyboardButton(text="4 ‚≠ê",
                                callback_data=f"review_stat_4_{dish_id}")

    btn5 = InlineKeyboardButton(text="5 ‚≠ê",
                                callback_data=f"review_stat_5_{dish_id}")

    menu.row(btn1, btn2, btn3, btn4, btn5)

    return menu


@dp.callback_query_handler(text_contains="review_stat")
async def review_star(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    data = call.data.split('_')
    rating = data[-2]
    # await dp.storage.set_data(user=user, data={'rating': rating})

    if db.get_users_ban(user):
        return None

        # –î–µ–π—Å—Ç–≤–∏–µ:
    dish_id = int(data[-1])
    dish = db.restaurants_get_by_id(dish_id)
    db.restaurants_set_rating(dish_id, int(data[-2]))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É correlation_coefficients
    db.save_dish_rating(user, dish_id, int(data[-2]))

    await dp.storage.set_data(user=user, data={
        'rating': rating,
        'dish_name': dish[2],
    })

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.delete()

    message_obj = await bot.send_message(
        chat_id=user,
        text=f"üí´ –ë–ª—é–¥–æ:\n"
             f"<i>¬´{dish[2]}¬ª</i>\n"
             f"\n"
             f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üôèüèª\n"
             f"\n"
             f"–°–ø–∞—Å–∏–±–æ!",
        reply_markup=buttons_05()
    )
    db.set_temp_users_state(user, 'review_end')
    db.set_temp_users_message_id(user, message_obj.message_id)
    db.add_user_action(user, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤')


def buttons_05():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå",
                                callback_data=f"review_end")

    menu.row(btn1)

    return menu


def buttons_food_05(dish_id: int, dish: int, length: int, last: int, in_basket: bool = None, qr_scanned: bool = None, quantity: int = 0, size_list: list = None, user: int = 0):
    menu = InlineKeyboardMarkup(row_width=3)
    if dish is not None:
        if length != 1:
            if dish > 0:
                btn1 = InlineKeyboardButton(text=f"‚è™",
                                            callback_data="send_dish_back")

                if last == 0:
                    menu.row(btn1)
                else:
                    btn2 = InlineKeyboardButton(text=f"‚è©",
                                                callback_data="send_dish_next")
                    menu.row(btn1, btn2)
            else:
                btn2 = InlineKeyboardButton(text=f"‚è©",
                                            callback_data="send_dish_next")
                menu.add(btn2)
        if qr_scanned:
            if in_basket:
                if quantity > 1:
                    btn0 = InlineKeyboardButton(text=f"–£–±—Ä–∞—Ç—å –∏–∑ üõí ({quantity})",
                                                callback_data=f"basket_remove")
                else:
                    btn0 = InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ üõí",
                                                callback_data=f"basket_remove")
                if size_list:
                    btn_extra = InlineKeyboardButton(text="+ 1",
                                                     callback_data=f"choice_size_{dish_id}")
                else:
                    btn_extra = InlineKeyboardButton(text="+ 1",
                                                callback_data=f"basket_add")
                menu.add(btn0)
                menu.add(btn_extra)
            else:
                if size_list:
                    btn0 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ üõí",
                                                callback_data=f"choice_size_{dish_id}")
                else:
                    btn0 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ üõí",
                                                callback_data=f"basket_add")
                menu.add(btn0)
            btn3 = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ ‚û°Ô∏è üõí", callback_data="check_order")
            menu.add(btn3)
    # menu_start
    btn1 = InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                                callback_data="watch_menu_again")

    menu.add(btn1)
    return menu


@dp.message_handler(commands=['boss'])
async def boss_shemodi(message: types.Message):
    user = message.from_user.id
    await bot.delete_message(user, message.message_id)
    message_obj = await bot.send_message(
        chat_id=user,
        text="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ",
    )
    db.set_temp_users_state(user, 'boss')
    db.set_temp_users_message_id(user, message_obj.message_id)


@dp.callback_query_handler(text_contains="review_end")
async def review_end(call: types.CallbackQuery):
    await call.answer()
    user_first_name = db.get_users_user_first_name(call.from_user.id)
    await bot.edit_message_text(chat_id=call.from_user.id,
                                message_id=call.message.message_id,
                                text=f"<b>{user_first_name}</b>, –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥–∞—Ö –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ <b>Korean Chick</b> \n\n"
                                     f"–ù–µ–π—Ä–æ—Å–µ—Ç—å food2mood —É—á—Ç—ë—Ç —Ç–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –±—É–¥—É—â–µ–º üòèüîú",
                                reply_markup=buttons_02()
    )


def buttons_02():
    menu = InlineKeyboardMarkup(row_width=2)

    btn1 = InlineKeyboardButton(text="‚èÆÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                                callback_data="menu_start")

    btn2 = InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –æ—Ç–∑—ã–≤ üÜï", callback_data="leave_a_review")

    btn3 = InlineKeyboardButton(text="–ú–æ–∏ f2m –∫–æ–∏–Ω—ã ü™ô", callback_data="food_to_mood_coin_status")

    menu.add(btn1)
    menu.add(btn2)

    return menu


@dp.callback_query_handler(text_contains='menu_start')
async def return_to_start(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    text = (f"<b>–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!\n"
            "–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑? </b>‚ò∫Ô∏èüôè")
    await call.message.delete()
    message_obj = await bot.send_message(
        chat_id=user,
        text=text,
        parse_mode='HTML',
        reply_markup=buttons_start_02()
    )