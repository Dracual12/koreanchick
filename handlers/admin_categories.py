from config import dp, db
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


@dp.message_handler(commands=['admin_categories'])
async def admin_categories_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if not db.check_admin_exists(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories2"),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="remove_category"),
        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data="change_priority"),
        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_categories")
    )
    
    await message.answer("üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "show_categories2")
async def show_categories(call: types.CallbackQuery):
    await call.answer()
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = db.get_prefer_categories()
    
    if not categories:
        await call.message.edit_text("üìã –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        await show_categories_menu(call.message)
    else:
        text = "üìã –¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        for i, category in enumerate(categories, 1):
            text += f"{i}. {category}\n"
        
        await call.message.edit_text(text)
        await show_categories_menu(call.message)


async def show_categories_for_message(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ Message (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö)"""
    categories = db.get_prefer_categories()
    
    if not categories:
        await message.answer("üìã –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        await show_categories_menu(message)
    else:
        text = "üìã –¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        for i, category in enumerate(categories, 1):
            text += f"{i}. {category}\n"
        
        await message.answer(text)
        await show_categories_menu(message)

async def show_categories_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="remove_category"),
        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data="change_priority"),
        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_categories"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_c")
    )
    
    await message.answer("üéõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "add_category")
async def add_category_start(call: types.CallbackQuery):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    await call.answer()
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–µ–Ω—é
    all_categories = db.get_all_categories()
    prefer_categories = db.get_prefer_categories()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    available_categories = [cat for cat in all_categories if cat not in prefer_categories]
    
    if not available_categories:
        await call.message.edit_text("‚ùå –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ.")
        await show_categories_menu(call.message)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for category in available_categories[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        keyboard.add(InlineKeyboardButton(category, callback_data=f"select_cat_{category}"))
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    
    await call.message.edit_text("‚ûï –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data.startswith("select_cat_"))
async def select_category_for_add(call: types.CallbackQuery):
    await call.answer()
    """–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    category = call.data.replace("select_cat_", "")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    keyboard = InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –æ—Ç 1 –¥–æ 10
    buttons = []
    for i in range(1, 11):
        buttons.append(InlineKeyboardButton(f"{i}", callback_data=f"priority_{category}_{i}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 3):
        row = buttons[i:i+3]
        keyboard.add(*row)
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="add_category"))
    
    await call.message.edit_text(
        f"üìù –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π, 10 - —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π):",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda call: call.data == "remove_category")
async def remove_category_start(call: types.CallbackQuery):
    await call.answer()
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = db.get_prefer_categories()
    
    if not categories:
        await call.message.edit_text("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await show_categories_menu(call.message)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for category in categories:
        keyboard.add(InlineKeyboardButton(f"‚ùå {category}", callback_data=f"remove_cat_{category}"))
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    
    await call.message.edit_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data.startswith("remove_cat_"))
async def remove_category_confirm(call: types.CallbackQuery):
    await call.answer()
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = call.data.replace("remove_cat_", "")
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{category}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_categories")
    )
    
    await call.message.edit_text(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'?", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data.startswith("confirm_remove_"))
async def confirm_remove_category(call: types.CallbackQuery):
    await call.answer()
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = call.data.replace("confirm_remove_", "")
    
    db.remove_prefer_category(category)
    await call.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await show_categories_for_message(call.message)

@dp.callback_query_handler(lambda call: call.data == "clear_categories")
async def clear_categories_confirm(call: types.CallbackQuery):
    await call.answer()
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="confirm_clear"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_categories")
    )
    
    await call.message.edit_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?", reply_markup=keyboard)

@dp.callback_query_handler(lambda call: call.data == "confirm_clear")
async def confirm_clear_categories(call: types.CallbackQuery):
    await call.answer()
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    db.clear_prefer_categories()
    await call.message.edit_text("‚úÖ –í—Å–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é
    await show_categories_menu(call.message)

@dp.callback_query_handler(lambda call: call.data == "back_to_categories")
async def back_to_categories(call: types.CallbackQuery):
    await call.answer()
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await show_categories(call)

@dp.callback_query_handler(lambda call: call.data == "back_to_admin_c")
async def back_to_admin(call: types.CallbackQuery):
    await call.answer()
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    await admin_categories_menu(call.message)

@dp.callback_query_handler(lambda call: call.data.startswith("priority_"))
async def select_priority(call: types.CallbackQuery):
    await call.answer()
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: priority_–∫–∞—Ç–µ–≥–æ—Ä–∏—è_–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    data = call.data.replace("priority_", "")
    parts = data.split("_", 1)
    
    if len(parts) != 2:
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞.")
        return
    
    category = parts[0]
    priority = int(parts[1])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    db.add_prefer_category(category, priority)
    
    await call.message.edit_text(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority}!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await show_categories_for_message(call.message) 