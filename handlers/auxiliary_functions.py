import datetime
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from naim.main import db
from iiko_f.iiko import korean_chick_portion_price_range


def total_and_current_counter():
    stats = db.get_waiters_names_and_stats()
    last_check_time = db.get_last_check_time()
    if last_check_time == datetime.datetime.now().strftime("%Y-%m-%d"):
        current_click_count = db.get_current_click_count()
    else:
        current_click_count = 0
        db.set_current_click_count(current_click_count)

    db.set_last_check_time(datetime.datetime.now().strftime("%Y-%m-%d"))
    current_guests_count = db.get_current_guests_count()
    total_guests_count = 0
    total_click_count = db.get_total_click_count()
    for waiter in stats:
        if waiter[4]:
            total_guests_count += len(set(eval(waiter[4])))
    return total_click_count, current_click_count, total_guests_count, current_guests_count


def ind_to_number(ind):
    numbers = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]
    result = ""
    for char in str(ind):
        result += numbers[int(char)]
    return result


def update_total_and_current_counter():
    try:
        total_click_count = int(db.get_total_click_count())
        total_click_count += 1
        db.set_total_click_count(total_click_count)
        last_check_time = db.get_last_check_time(rest)
        if last_check_time == datetime.datetime.now().strftime("%Y-%m-%d"):
            current_click_count = int(db.get_current_click_count(rest))
            current_click_count += 1
        else:
            current_click_count = 1
        db.set_current_click_count(rest, current_click_count)
        db.set_last_check_time(rest, datetime.datetime.now().strftime("%Y-%m-%d"))
    except Exception as e:
        print(e)


def generate_dish_text(user, icons, dish, length, numb, dish_id):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –±–ª—é–¥–∞
    user_rating = None
    try:
        result = db.cursor.execute("SELECT users_dish_coefficients FROM correlation_coefficient WHERE user_id = ?", (user,)).fetchone()
        if result and result[0]:
            user_ratings = eval(result[0])
            if str(dish_id) in user_ratings:
                rating_data = user_ratings[str(dish_id)]
                if isinstance(rating_data, dict):
                    user_rating = rating_data['rating']
                else:
                    user_rating = float(rating_data)
    except Exception as e:
        print(f"Error getting user rating: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
    stars = ""
    if user_rating is not None:
        stars = " " + "‚≠ê" * round(user_rating)
    restaurant = "Korean Chick"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–ª—é–¥–æ –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã–º –∏–∑ Korean Chick
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ "Korean Chick" (–¥–ª—è —É—á–µ—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ "Korean Chick: –∞–¥—Ä–µ—Å")
    is_korean_chick = "Korean Chick" in restaurant
    price_text = ""
    weight_text = ""
    
    if is_korean_chick and dish['–ù–∞–∑–≤–∞–Ω–∏–µ'] in korean_chick_portion_price_range:
        price_range = korean_chick_portion_price_range[dish['–ù–∞–∑–≤–∞–Ω–∏–µ']]
        price_text = f"üí∞ <i>–¶–µ–Ω–∞: {price_range} —Ä—É–±.</i>"
        # –î–ª—è –ø–æ—Ä—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å
        weight_text = ""
    else:
        price_text = f"üí∞ <i>–¶–µ–Ω–∞: {int(dish['–¶–µ–Ω–∞'])} —Ä—É–±.</i>"
        weight_text = f"‚öñÔ∏è <i>–í–µ—Å: {str(dish['–ì—Ä–∞–º–º']).replace('.0', '')} –≥.</i>"

    text = (f"‚Äî‚Äî {icons[dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]} <b>{dish['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}</b> ‚Äî‚Äî\n"
            f"\n"
            f"{icons[length - numb]} <i>{dish['–ù–∞–∑–≤–∞–Ω–∏–µ']}</i>{stars}\n\n"
            f"{price_text}\n"
            f"{weight_text}"
            f"\n\n"
            f"‚Äî‚Äî {icons[dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']]} <b>{dish['–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']}</b> ‚Äî‚Äî\n"
            f"\n"
            f"<i>–£–∑–Ω–∞–π –±–æ–ª—å—à–µ, –Ω–∞–∂–∞–≤ /–∫–æ–º–∞–Ω–¥—É:</i>"
            f"\n"
            f"\n"
            f"ü§ñ/com - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò"
            f"\n"
            f"üî¢/kbzhu - –ö–ë–ñ–£ –±–ª—é–¥–∞"
            f"\n"
            f"üßæ/sostav - —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞"
            f"\n"
            f"\n"
            f"<i>–õ–∏—Å—Ç–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ‚è™ –∏ ‚è©üëáüèª</i>\n\n")
    if db.get_qr_scanned(user):
        text += "<b>–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–ª—é–¥–æ? –î–æ–±–∞–≤—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí</b>"
    return text
