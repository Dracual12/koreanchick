from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo

from config import dp, bot, db
import handlers.stop_lists as sl
import handlers.auxiliary_functions as af
from handlers import send_table
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ webapp_config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from webapp_config import get_webapp_url


def boss_menu():
    menu = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="‚õîÔ∏è–°–¢–û–ü-–õ–ò–°–¢", callback_data="boss_stop_list")
    btn2 = InlineKeyboardButton(text="üìù–û–§–ò–¶–ò–ê–ù–¢–´", callback_data="boss_waiters_stat")
    btn3 = InlineKeyboardButton(text="üì∂–†–ï–ö–õ–ê–ú–ê", callback_data="boss_commercial")
    btn4 = InlineKeyboardButton(text="–¢–ê–ë–õ–ò–¶–ê", callback_data="boss_table")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Web App –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    btn5 = InlineKeyboardButton(
        text="üåê –í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï",
        web_app=WebAppInfo(url=get_webapp_url())
    )
    
    menu.add(btn1)
    menu.add(btn2)
    menu.add(btn3)
    menu.add(btn4)
    menu.add(btn5)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Web App
    return menu


@dp.callback_query_handler(lambda call: call.data == "boss_commercial")
async def boss_commercial(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    text = ("<b>üì∂ –†–ï–ö–õ–ê–ú–ê</b>\n\n"
            "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∫–ª–∞–º–µ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
            "–§—É–Ω–∫—Ü–∏–∏:\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ç—Ä–∞—Ñ–∏–∫–∞\n"
            "‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π")
    
    keyboard = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_boss_menu")
    keyboard.add(back_btn)
    
    await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.callback_query_handler(lambda call: call.data == "boss_waiters_stat")
async def boss_waiters_stat(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
    waiters = db.get_all_waiters()
    
    text = "<b>üìù –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–§–ò–¶–ò–ê–ù–¢–û–í</b>\n\n"
    
    if waiters:
        for waiter in waiters:
            waiter_id = waiter[0]
            waiter_name = waiter[1] if len(waiter) > 1 else f"–û—Ñ–∏—Ü–∏–∞–Ω—Ç {waiter_id}"
            earnings = db.get_current_earnings(waiter_id) or 0
            orders_count = len(eval(db.get_waiter_score(waiter_id))) if db.get_waiter_score(waiter_id) else 0
            
            text += f"<b>{waiter_name}</b>\n"
            text += f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {orders_count}\n"
            text += f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: {earnings} —Ä—É–±.\n\n"
    else:
        text += "–û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    keyboard = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_boss_menu")
    keyboard.add(back_btn)
    
    await bot.edit_message_text(
        chat_id=user,
        message_id=call.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.callback_query_handler(lambda call: call.data == "back_to_boss_menu")
async def back_to_boss_menu(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id

    await generate_boss_menu(call.from_user.id, None)


async def generate_boss_menu(boss_id, message_id=None):
    mes = db.get_users_temp_message_id(boss_id)
    text = ("<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n\n"
            f"*Ô∏è‚É£ –≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è <b>–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b> –∑–∞–≤–µ–¥–µ–Ω–∏—è <b>KoreanChick</b>\n\n"
            "<b><i>/–°–¢–û–ü-–õ–ò–°–¢</i></b> - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç\n"
            "<b><i>/–û–§–ò–¶–ò–ê–ù–¢–´</i></b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤\n"
            "<b><i>/–†–ï–ö–õ–ê–ú–ê</i></b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "<b><i>/–¢–ê–ë–õ–ò–¶–ê</i></b> - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n"
            "<b><i>/–í–ï–ë-–ü–†–ò–õ–û–ñ–ï–ù–ò–ï</i></b> - –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    if message_id:
        message_obj = await bot.edit_message_text(chat_id=boss_id,
                                                  message_id=mes[0],
                                                  text=text,
                                                  reply_markup=boss_menu())
    else:
        message_obj = await bot.send_message(
            chat_id=boss_id,
            text=text,
            reply_markup=boss_menu()
        )
    db.set_temp_users_message_id(boss_id, message_obj.message_id)


@dp.callback_query_handler(lambda call: call.data == "boss_table")
async def table(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    await send_table.send_table(call.message)


@dp.callback_query_handler(lambda call: call.data == "boss_stop_list")
async def boss_stop_list(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–æ–ø-–ª–∏—Å—Ç–æ–º
    await sl.show_stop_list_menu(user, call.message.message_id)
