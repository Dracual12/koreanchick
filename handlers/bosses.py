from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup

from config import dp, bot, db
import handlers.stop_lists as sl
import handlers.auxiliary_functions as af
from handlers import send_table


def boss_menu():
    menu = InlineKeyboardMarkup()
    btn1 = InlineKeyboardButton(text="‚õîÔ∏è–°–¢–û–ü-–õ–ò–°–¢", callback_data="boss_stop_list")
    btn2 = InlineKeyboardButton(text="üìù–û–§–ò–¶–ò–ê–ù–¢–´", callback_data="boss_waiters_stat")
    btn3 = InlineKeyboardButton(text="üì∂–†–ï–ö–õ–ê–ú–ê", callback_data="boss_commercial")
    btn4 = InlineKeyboardButton(text="–¢–ê–ë–õ–ò–¶–ê", callback_data="boss_table")
    menu.add(btn1)
    menu.add(btn2)
    menu.add(btn3)
    menu.add(btn4)
    return menu


@dp.callback_query_handler(lambda call: call.data == "boss_commercial")
async def boss_commercial(call: types.CallbackQuery):
    await call.answer()
    try:
        boss_id = call.from_user.id
        total_click_count, current_click_count, total_guests_count, current_guests_count = af.total_and_current_counter()
        if total_click_count is None:
            total_click_count = 0
        text = (f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∑–∞–≤–µ–¥–µ–Ω–∏—é:</b>\n\n"
                f"‚ñ∂Ô∏è <i>–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫:</i> <b>{total_click_count} ({current_click_count})</b>\n\n"
                f"‚úÖ <i>–û–±—Å–ª—É–∂–µ–Ω–æ –≥–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ f2m:</i> <b>{total_guests_count} ({current_guests_count})</b>\n"
                "<blockquote>–í —Å–∫–æ–±–∫–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–º–µ–Ω—É —Å 00:00 –¥–æ 23:59</blockquote>")

        messag_obj = await bot.edit_message_text(chat_id=boss_id,
                                                 message_id=call.message.message_id,
                                                 text=text,
                                                 reply_markup=InlineKeyboardMarkup().row(
                                                     InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                                                          callback_data="back_to_boss_menu")))
        db.set_temp_users_message_id(boss_id, messag_obj.message_id)
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == "boss_waiters_stat")
async def boss_waiters_stat(call: types.CallbackQuery):
    await call.answer()
    try:
        boss_id = call.from_user.id
        stats = db.get_waiters_names_and_stats()
        text = "üóí <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º:</b>\n\n"
        for waiter in stats:
            if None not in waiter:
                current_waiter_count = db.get_current_waiter_guests(waiter[0])
                current_waiter_earning = db.get_current_waiter_sells(waiter[0])
                text += (
                    f"‚è∫Ô∏è <i>{waiter[1]} {waiter[2]} {waiter[3]}</i>\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <b>{len(set(eval(waiter[4])))}"
                    f"({current_waiter_count})</b>\n- –í—ã—Ä—É—á–∫–∞: <b>{waiter[5]}({current_waiter_earning})</b>\n\n")
            else:
                print("–£ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –µ—Å—Ç—å –ø–æ–ª—è None –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ", waiter)
        text += "<blockquote>–í —Å–∫–æ–±–∫–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–º–µ–Ω—É —Å 00:00 –¥–æ 23:59</blockquote>"
        message_obj = await bot.edit_message_text(chat_id=boss_id,
                                                  message_id=call.message.message_id,
                                                  text=text,
                                                  reply_markup=InlineKeyboardMarkup().row(
                                                      InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                                                           callback_data="back_to_boss_menu")))
        db.set_temp_users_message_id(boss_id, message_obj.message_id)
    except Exception as e:
        print(e)


@dp.callback_query_handler(lambda call: call.data == "boss_stop_list")
async def boss_stop_list(call: types.CallbackQuery):
    await call.answer()
    boss_id = call.from_user.id
    if not db.check_stop_list_exists():
        db.create_stop_list()
    await sl.set_stop_list(boss_id, "boss", call.message.message_id)


@dp.callback_query_handler(lambda call: call.data == "back_to_boss_menu")
async def back_to_boss_menu(call: types.CallbackQuery):
    await call.answer()
    try:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    except:
        print('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    await generate_boss_menu(call.from_user.id, None)


async def generate_boss_menu(boss_id, message_id=None):
    mes = db.get_users_temp_message_id(boss_id)
    text = ("<b>–ü—Ä–∏–≤–µ—Ç!</b> üëã\n\n"
            f"*Ô∏è‚É£ –≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è <b>–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b> –∑–∞–≤–µ–¥–µ–Ω–∏—è <b>KoreanChick</b>\n\n"
            "<b><i>/–°–¢–û–ü-–õ–ò–°–¢</i></b> - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç\n"
            "<b><i>/–û–§–ò–¶–ò–ê–ù–¢–´</i></b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤\n"
            "<b><i>/–†–ï–ö–õ–ê–ú–ê</i></b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "<b><i>/–¢–ê–ë–õ–ò–¶–ê</i></b> - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
    if message_id:
        message_obj = await bot.edit_message_text(chat_id=boss_id,
                                                  message_id=mes[0],
                                                  text=text,
                                                  reply_markup=boss_menu())
    else:
        message_obj = await bot.send_message(
            chat_id=boss_id,
            text=text,
            reply_markup=boss_menu()
        )
    db.set_temp_users_message_id(boss_id, message_obj.message_id)


@dp.callback_query_handler(lambda call: call.data == "boss_table")
async def table(call: types.CallbackQuery):
    await call.answer()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await send_table.send_table(call.message)
