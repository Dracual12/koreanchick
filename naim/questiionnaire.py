from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from config import dp, bot, db
from files.icons import icons
from menu.categories import create_buttons_to_menu
from menu.sort_the import generate_recommendation
# ======================================================================================================================
# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç =================================================================================================
# ======================================================================================================================


def make_the_first_q(user):
    ank = db.get_users_first_q(user)
    text = '<b>–ö–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? </b>üôÇüôå\n\n'
    text += '<b>‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî‚Äî‚Äî</b>\n\n'
    text += f'{ank[1]} {icons[ank[1]]}\n\n'
    text += f'<b>‚Äî‚Äî‚Äî –ì–æ–ª–æ–¥–µ–Ω –Ω–∞  ‚Äî‚Äî‚Äî</b>\n\n'
    text += f'\t{ank[2]}\n\n'
    text += '<b>‚Äî‚Äî‚Äî –•–æ—á–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ?  ‚Äî‚Äî‚Äî</b>\n\n'
    text += f'\t{ank[3]} {icons[ank[3]]}'
    return text


def buttons_for_the_first_q():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–í—Å—ë —Ç–∞–∫ ‚úÖ",
                                callback_data="confirmation_of_the_first_q")

    btn2 = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù",
                                callback_data="change_the_first_q")
    menu.add(btn1)
    menu.add(btn2)

    return menu


def make_the_second_q(user):
    ank = db.get_users_second_q(user)
    age2 = ank[2]
    age = ''
    if age2 == "–î–æ 18":
        age = "–î–æ 18 üë∂"
    elif age2 == "18-25":
        age = "18-25 üßë"
    elif age2 == "26-35":
        age = "26-35 üë®‚Äçü¶±"
    elif age2 == "36-45":
        age = "36-45 üßî‚ÄçÔ∏è"
    elif age2 == '–ø—É—Å—Ç–æ':
        age = '–ø—É—Å—Ç–æ'
    text = '<b>–ê–Ω–∫–µ—Ç–∞ —Ç–≤–æ–∏—Ö –≤–∫—É—Å–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</b> üìÉ\n\n'
    text += '<b>‚Äî‚Äî‚Äî –ü–æ–ª ‚Äî‚Äî‚Äî</b>\n'
    text += f'{ank[1]} {icons[ank[1]]}Ô∏è\n\n'
    text += '<b>‚Äî‚Äî‚Äî –í–æ–∑—Ä–∞—Å—Ç ‚Äî‚Äî‚Äî</b>\n'
    text += f'{age}\n\n'
    text += '<b>‚Äî‚Äî‚Äî –°—Ç–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è ‚Äî‚Äî‚Äî</b>\n'
    text += f'{ank[3]} {icons[ank[3]]}\n\n'
    if ank[4] == '–ø—É—Å—Ç–æ' or ank[4] is None:
        text += '<b>‚Äî‚Äî‚Äî –ù–ï –ï–®–¨ üíî ‚Äî‚Äî‚Äî</b>\n'
        text += f'{ank[5]}\n\n'
        text += '<b>‚Äî‚Äî‚Äî –õ–Æ–ë–ò–®–¨ ‚ù§Ô∏è ‚Äî‚Äî‚Äî</b>\n'
        text += f'{ank[6]}\n\n'
        text += '<blockquote>–ö—Å—Ç–∞—Ç–∏, food2mood <b>—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–≤–æ–π –æ–ø—ã—Ç</b> –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤. ' \
                '<b>–û—Å—Ç–∞–≤–ª—è–π –æ—Ç–∑—ã–≤—ã</b> –Ω–∞ –±–ª—é–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –±—É–¥—É—â–µ–º üòâüôè</blockquote>'
    else:
        text += '<b>‚Äî‚Äî‚Äî –ö–∫–∞–ª –Ω–∞ –±–ª—é–¥–æ ‚Äî‚Äî‚Äî</b>\n'
        text += f'{ank[4]}\n\n'
        text += '<b>‚Äî‚Äî‚Äî –ù–ï –ï–®–¨ üíî ‚Äî‚Äî‚Äî</b>\n'
        text += f'{ank[5]}\n\n'
        text += '<b>‚Äî‚Äî‚Äî –õ–Æ–ë–ò–®–¨ ‚ù§Ô∏è ‚Äî‚Äî‚Äî</b>\n'
        text += f'{ank[6]}\n\n'
        text += '<blockquote>–ö—Å—Ç–∞—Ç–∏, food2mood <b>—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–≤–æ–π –æ–ø—ã—Ç</b> –∏ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤. ' \
                '<b>–û—Å—Ç–∞–≤–ª—è–π –æ—Ç–∑—ã–≤—ã</b> –Ω–∞ –±–ª—é–¥–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –±—É–¥—É—â–µ–º üòâüôè</blockquote>'

    return text


def buttons_for_the_second_q():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–í—Å—ë —Ç–∞–∫ ‚úÖ",
                                callback_data="confirmation_of_the_second_q")

    btn2 = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù",
                                callback_data="change_the_second_q")
    btn3 = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data="order_at_rest_return")
    menu.add(btn1)
    menu.add(btn2)
    menu.add(btn3)
    return menu


# ======================================================================================================================
# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ callbacks =================================================================================================
# ======================================================================================================================


@dp.callback_query_handler(text_contains='confirmation_of_the')
async def confirmation_of_the_first_q(call: types.CallbackQuery):
    await call.answer()
    if 'first' in call.data:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π –∞–Ω–∫–µ—Ç—ã –≤ —Å–µ—Å—Å–∏—é
        user_id = str(call.from_user.id)
        first_q_data = db.get_users_first_q(call.from_user.id)
        if first_q_data:
            db.update_logging_session_mood(user_id, first_q_data[1])  # –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–∏–Ω–¥–µ–∫—Å 1)
            db.update_logging_session_hungry(user_id, first_q_data[2])  # –≥–æ–ª–æ–¥ (–∏–Ω–¥–µ–∫—Å 2)
            db.update_logging_session_style(user_id, first_q_data[3])  # —Å—Ç–∏–ª—å (prefers, –∏–Ω–¥–µ–∫—Å 3)
        
        message_with_q = await bot.edit_message_text(chat_id=call.from_user.id,
                                                     message_id=call.message.message_id,
                                                     text=make_the_second_q(call.from_user.id),
                                                     reply_markup=buttons_for_the_second_q())
        db.set_temp_users_message_id(call.from_user.id, message_with_q.message_id)

    if 'second' in call.data:
        user = call.from_user.id
        user_id = str(user)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π –∞–Ω–∫–µ—Ç—ã –≤ —Å–µ—Å—Å–∏—é
        second_q_data = db.get_users_second_q(user)
        if second_q_data:
            db.update_logging_session_sex(user_id, second_q_data[1])  # –ø–æ–ª (–∏–Ω–¥–µ–∫—Å 1)
            db.update_logging_session_age(user_id, second_q_data[2])  # –≤–æ–∑—Ä–∞—Å—Ç (–∏–Ω–¥–µ–∫—Å 2)
            db.update_logging_session_dish_style(user_id, second_q_data[3])  # —Å—Ç–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è (–∏–Ω–¥–µ–∫—Å 3)
            db.update_logging_session_ccal(user_id, second_q_data[4])  # –∫–∞–ª–æ—Ä–∏–∏ (–∏–Ω–¥–µ–∫—Å 4)
            db.update_logging_session_dislike(user_id, second_q_data[5])  # –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∏–Ω–¥–µ–∫—Å 5)
            db.update_logging_session_like(user_id, second_q_data[6])  # –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–∏–Ω–¥–µ–∫—Å 6)
        
        list_of_dishes = []
        recommendation = generate_recommendation(user)
        db.set_temp_rec(user, f"{recommendation}")
        recommendation_text = f"<b>üîù –í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ ¬´KoreanChick¬ª –Ω–µ–π—Ä–æ—Å–µ—Ç—å food2mood —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–±–µ:</b>\n\n"
        recommendation = eval(db.get_temp_rec(user))
        db.set_temp_rec(user, f"{recommendation}")
        for dish in recommendation:
            recommendation_text += f"{dish[0]} <i>{dish[1]}</i>\n"
            list_of_dishes.append(dish[1])
        recommendation_text += (
            "\n<blockquote>–ù–∞–∂–º–∏ <b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é</b> üßæ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∫–∏–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏–∑—É—á–∏—Ç—å –±–ª—é–¥–∞! üëÄ</blockquote>")

        await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=recommendation_text,
                                    reply_markup=create_buttons_to_menu(user))
        try:
            await bot.delete_message(chat_id=user, message_id=db.get_first_message_to_delete(user))
        except Exception as e:
            pass
    if 'qr' in call.data:
        user = call.from_user.id
        list_of_dishes = []
        recommendation = generate_recommendation(user)
        db.set_temp_rec(user, f"{recommendation}")
        recommendation_text = f"<b>üîù –í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ ¬´KoreanChick¬ª –Ω–µ–π—Ä–æ—Å–µ—Ç—å food2mood —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–±–µ:</b>\n\n"
        recommendation = eval(db.get_temp_rec(user))
        db.set_temp_rec(user, f"{recommendation}")
        for dish in recommendation:
            recommendation_text += f"{dish[0]} <i>{dish[1]}</i>\n"
            list_of_dishes.append(dish[1])
        recommendation_text += (
            "\n<blockquote>–ù–∞–∂–º–∏ <b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é</b> üßæ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∫–∏–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏–∑—É—á–∏—Ç—å –±–ª—é–¥–∞! üëÄ</blockquote>")

        await bot.delete_message(chat_id=user, message_id=call.message.message_id)
        await bot.send_message(chat_id=user, text=recommendation_text, reply_markup=create_buttons_to_menu(user))



@dp.callback_query_handler(text_contains='change_the_')
async def change_the_questionnaire(call: types.CallbackQuery):
    await call.answer()
    if 'first' in call.data or 'returnf' in call.data:
        text = '–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                    reply_markup=create_mood_buttons())
    if 'second' in call.data:
        user = call.from_user.id
        text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å 1/5:\n\n"
        f"<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:</b>"
        await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text,
                                    reply_markup=create_sex_buttons())


@dp.callback_query_handler(text_contains='food_choose_get_')
async def choose_the_mood(call: types.CallbackQuery):
    await call.answer()
    if 'return' not in call.data:
        mood = call.data.split('_')[-1]
        db.set_temp_users_mood(call.from_user.id, mood)
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
        db.update_logging_session_mood(str(call.from_user.id), mood)
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –≤–∞—à–µ–≥–æ –≥–æ–ª–æ–¥–∞'
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                reply_markup=create_hungry_buttons())


@dp.callback_query_handler(text_contains='choose_hungry')
async def choose_hungry(call: types.CallbackQuery):
    await call.answer()
    hungry_level = call.data.split('_')[-1]
    db.set_temp_users_hungry(call.from_user.id, hungry_level)
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –≥–æ–ª–æ–¥–∞ –≤ —Å–µ—Å—Å–∏–∏
    db.update_logging_session_hungry(str(call.from_user.id), hungry_level)
    text = '–•–æ—á–µ—Ç—Å—è –ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ?'
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                reply_markup=create_prefers_buttons())


@dp.callback_query_handler(text_contains='choose_prefers')
async def choose_prefers(call: types.CallbackQuery):
    await call.answer()
    prefer = call.data.split('_')[-1]
    db.set_temp_users_prefers(call.from_user.id, prefer)
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text=make_the_second_q(call.from_user.id), reply_markup=buttons_for_the_second_q())


@dp.callback_query_handler(text_contains='choose_sex')
async def choose_sex(call: types.CallbackQuery):
    await call.answer()
    if 'return' not in call.data:
        sex = call.data.split('_')[-1]
        db.set_temp_users_sex(call.from_user.id, sex)
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª –≤ —Å–µ—Å—Å–∏–∏
        db.update_logging_session_sex(str(call.from_user.id), sex)
    text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å 2/5:\n\n<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:</b>"
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                reply_markup=create_age_buttons(call.from_user.id))


@dp.callback_query_handler(text_contains='choose_age')
async def choose_age(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    age = {'18': '–î–æ 18',
           '25': '18-25',
           '35': '26-35',
           '45': '36-45',
           "45+": "45+"}
    if 'return' not in call.data:
        age = age[call.data.split('_')[-1]]
        db.set_temp_users_age(user, age)
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ —Å–µ—Å—Å–∏–∏
        db.update_logging_session_age(str(user), age)
    text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å 3/5:\n\n<b>–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?</b>"
    await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text,
                                reply_markup=create_style_buttons())


@dp.callback_query_handler(text_contains='choose_style')
async def choose_style(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    if 'return' not in call.data:
        style = call.data.split('_')[-1]
        db.set_temp_users_food_style(user, style)
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
        db.update_logging_session_style(str(user), style)
        if style == '–î–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ':
            text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å 4/6:\n\n<b>–ö–∞–ª–æ—Ä–∞–∂ –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞?</b>"
            await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text, reply_markup=create_ccal_buttons())
        else:
            db.set_temp_users_ccal(user, None)
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞–ª–æ—Ä–∏–π –≤ —Å–µ—Å—Å–∏–∏
            db.update_logging_session_ccal(str(user), None)
            text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å 4/5:\n\n<b>–ß—Ç–æ —Ç—ã –Ω–µ –µ—à—å?</b>\n\n<i>–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –µ—à—å, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. <u>–ù–∞–ø—Ä–∏–º–µ—Ä: –ª—É–∫, —á–µ—Å–Ω–æ–∫ </u></i>"
            db.set_temp_users_state(user, 'dont_like_to_eat')
            message_obj = await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text, reply_markup=skip_blacklist(), parse_mode="HTML")
            db.set_temp_users_message_id(user, message_obj.message_id)


@dp.callback_query_handler(text_contains='choose_ccal')
async def choose_ccal(call: types.CallbackQuery):
    await call.answer()
    ccal = call.data.split('_')[-1]
    user = call.from_user.id
    db.set_temp_users_ccal(user, ccal)
    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
    db.update_logging_session_ccal(str(user), ccal)
    text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å 5/6:\n\n<b>–ß—Ç–æ —Ç—ã –Ω–µ –µ—à—å?</b>\n\n<i>–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –µ—à—å, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. <u>–ù–∞–ø—Ä–∏–º–µ—Ä: –ª—É–∫, —á–µ—Å–Ω–æ–∫ </u> </i>"
    db.set_temp_users_state(user, 'dont_like_to_eat')
    await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text = text, reply_markup=skip_blacklist())


@dp.callback_query_handler(text_contains='blacklist')
async def blacklist(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    if 'yes' in call.data:
        if db.get_users_second_q(user)[4] is None:
            k = 0
        else:
            k = 1
        text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å {5+k}/{5+k}:\n\n<b>–ê —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤?</b>\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç food2mood –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å üòâ‚úåÔ∏è–ù–∞–ø—Ä–∏–º–µ—Ä: <u>–∫—É—Ä–∏—Ü–∞, –±–∞–∫–ª–∞–∂–∞–Ω—ã </u> </i>"
        message_obj = await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text, reply_markup=skip_whitelist())
        db.set_temp_users_state(user, 'like_to_eat')
        db.set_temp_users_message_id(user, message_obj.message_id)
    if 'no' in call.data:
        if db.get_users_second_q(user)[4] is None:
            k = 0
        else:
            k = 1
        text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å {4+k}/{5+k}:\n\n<b>–ß—Ç–æ —Ç—ã –Ω–µ –µ—à—å?</b>\n\n<i>–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –µ—à—å, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. <u>–ù–∞–ø—Ä–∏–º–µ—Ä: –ª—É–∫, —á–µ—Å–Ω–æ–∫ </u></i>"
        db.set_temp_users_state(user, 'dont_like_to_eat')
        message_obj = await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text, reply_markup=skip_blacklist(),
                                                  parse_mode="HTML")
        db.set_temp_users_message_id(user, message_obj.message_id)


@dp.callback_query_handler(text_contains='whitelist')
async def whitelist(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    if 'yes' in call.data:
        list_of_dishes = []
        recommendation = generate_recommendation(user)
        db.set_temp_rec(user, f"{recommendation}")
        recommendation_text = f"<b>üîù –í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ ¬´KoreanChick¬ª –Ω–µ–π—Ä–æ—Å–µ—Ç—å food2mood —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–±–µ:</b>\n\n"
        recommendation = eval(db.get_temp_rec(user))
        db.set_temp_rec(user, f"{recommendation}")
        for dish in recommendation:
            recommendation_text += f"{dish[0]} <i>{dish[1]}</i>\n"
            list_of_dishes.append(dish[1])
        recommendation_text += (
            "\n<blockquote>–ù–∞–∂–º–∏ <b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é</b> üßæ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏–∑—É—á–∏—Ç—å –±–ª—é–¥–∞! üëÄ</blockquote>")
        try:
            await bot.delete_message(chat_id=user, message_id=db.get_first_message_to_delete(user))
        except Exception as e:
            print(e)
        await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=recommendation_text, reply_markup=create_buttons_to_menu(user))
    if 'no' in call.data:
        if db.get_users_second_q(user)[4] is None:
            k = 0
        else:
            k = 1
        text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å {5 + k}/{5 + k}:\n\n<b>–ê —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤?</b>\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç food2mood –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å üòâ‚úåÔ∏èÔ∏è–ù–∞–ø—Ä–∏–º–µ—Ä: <u>–∫—É—Ä–∏—Ü–∞, –±–∞–∫–ª–∞–∂–∞–Ω—ã </u></i>"
        message_obj = await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text, reply_markup=skip_whitelist())
        db.set_temp_users_state(user, 'like_to_eat')
        db.set_temp_users_message_id(user, message_obj.message_id)


@dp.callback_query_handler(text_contains='skip')
async def skip(call: types.CallbackQuery):
    await call.answer()
    user = call.from_user.id
    if 'blaclist' in call.data:
        if db.get_users_second_q(user)[4] is None:
            k = 0
        else:
            k = 1
        text = f"‚ñ∂ –í–æ–ø—Ä–æ—Å {5 + k}/{5 + k}:\n\n<b>–ê —á—Ç–æ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤?</b>\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç food2mood –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å üòâ‚úåÔ∏è–ù–∞–ø—Ä–∏–º–µ—Ä: <u>–∫—É—Ä–∏—Ü–∞, –±–∞–∫–ª–∞–∂–∞–Ω—ã </u> </i>"
        message_obj = await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=text, reply_markup=skip_whitelist())
        db.set_temp_users_state(user, 'like_to_eat')
        db.set_temp_users_message_id(user, message_obj.message_id)
    else:
        list_of_dishes = []
        recommendation = generate_recommendation(user)
        db.set_temp_rec(user, f"{recommendation}")
        recommendation_text = f"<b>üîù –í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ ¬´KoreanChick¬ª –Ω–µ–π—Ä–æ—Å–µ—Ç—å food2mood —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç–µ–±–µ:</b>\n\n"
        recommendation = eval(db.get_temp_rec(user))
        db.set_temp_rec(user, f"{recommendation}")
        for dish in recommendation:
            recommendation_text += f"{dish[0]} <i>{dish[1]}</i>\n"
            list_of_dishes.append(dish[1])
        recommendation_text += (
            "\n<blockquote>–ù–∞–∂–º–∏ <b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é</b> üßæ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏–∑—É—á–∏—Ç—å –±–ª—é–¥–∞! üëÄ</blockquote>")
        try:
            await bot.delete_message(chat_id=user, message_id=db.get_first_message_to_delete(user))
        except Exception as e:
            print(e)
        await bot.edit_message_text(chat_id=user, message_id=call.message.message_id, text=recommendation_text,
                                    reply_markup=create_buttons_to_menu(user))
# ======================================================================================================================
# ===== –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä =================================================================================================
# ======================================================================================================================


def create_mood_buttons():
    menu = InlineKeyboardMarkup(row_width=3)

    btn1 = InlineKeyboardButton(text=f"–†–∞–¥–æ—Å—Ç—å {icons['–†–∞–¥–æ—Å—Ç—å']}",
                                callback_data="food_choose_get_–†–∞–¥–æ—Å—Ç—å")

    btn2 = InlineKeyboardButton(text=f"–ü–µ—á–∞–ª—å {icons['–ü–µ—á–∞–ª—å']}",
                                callback_data="food_choose_get_–ü–µ—á–∞–ª—å")

    btn3 = InlineKeyboardButton(text=f"–ì–Ω–µ–≤ {icons['–ì–Ω–µ–≤']}",
                                callback_data="food_choose_get_–ì–Ω–µ–≤")

    btn4 = InlineKeyboardButton(text=f"–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ {icons['–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ']}",
                                callback_data="food_choose_get_–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ")

    btn5 = InlineKeyboardButton(text=f"–í–æ–ª–Ω–µ–Ω–∏–µ {icons['–í–æ–ª–Ω–µ–Ω–∏–µ']}",
                                callback_data="food_choose_get_–í–æ–ª–Ω–µ–Ω–∏–µ")

    btn9 = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data="order_at_rest")

    menu.add(btn1, btn2, btn3)
    menu.add(btn4, btn5)
    menu.add(btn9)

    return menu


def create_hungry_buttons():
    menu = InlineKeyboardMarkup(row_width=2)
    btn1 = InlineKeyboardButton(text=f"2/10",
                                callback_data="choose_hungry_2")

    btn2 = InlineKeyboardButton(text=f"5/10",
                                callback_data="choose_hungry_5")

    btn3 = InlineKeyboardButton(text=f"7/10",
                                callback_data="choose_hungry_7")

    btn4 = InlineKeyboardButton(text=f"10/10",
                                callback_data="choose_hungry_10")

    btn9 = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data="change_the_returnf")

    menu.add(btn1, btn2)
    menu.add(btn3, btn4)
    menu.add(btn9)
    return menu


def create_prefers_buttons():
    menu = InlineKeyboardMarkup(row_width=2)
    btn1 = InlineKeyboardButton(text=f"–ú–Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ üëå",
                                callback_data="choose_prefers_–ú–Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ")

    btn2 = InlineKeyboardButton(text=f"–•–æ—á—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ üÜï",
                                callback_data="choose_prefers_–•–æ—á—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤")

    btn9 = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data="food_choose_get_return")

    menu.add(btn1, btn2)
    menu.add(btn9)
    return menu


def create_sex_buttons():
    menu = InlineKeyboardMarkup(row_width=2)
    btn1 = InlineKeyboardButton(text=f"–ú—É–∂—á–∏–Ω–∞ {icons['–ú—É–∂—á–∏–Ω–∞']}",
                                callback_data="choose_sex_–ú—É–∂—á–∏–Ω–∞")

    btn2 = InlineKeyboardButton(text=f"–ñ–µ–Ω—â–∏–Ω–∞ {icons['–ñ–µ–Ω—â–∏–Ω–∞']}",
                                callback_data="choose_sex_–ñ–µ–Ω—â–∏–Ω–∞")

    btn9 = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data="confirmation_of_the_first_q")

    menu.add(btn1, btn2)
    menu.add(btn9)
    return menu


def create_age_buttons(user):
    sex = db.get_users_second_q(user)[1]
    if sex == "–ú—É–∂—á–∏–Ω–∞":
        age_emoji = ["üßí", "üßë", "üë®‚Äçü¶±", "üßî‚Äç‚ôÇÔ∏è", "üë®‚Äçü¶≥"]
    else:
        age_emoji = ["üëß", "üë©", "üë±‚Äç‚ôÄÔ∏è", "üë©‚Äçü¶±", "üßì"]
    menu = InlineKeyboardMarkup(row_width=3)
    btn1 = InlineKeyboardButton(text=f"–î–æ 18 {age_emoji[0]}",
                                callback_data="choose_age_18")

    btn2 = InlineKeyboardButton(text=f"18-25 {age_emoji[1]}",
                                callback_data="choose_age_25")

    btn3 = InlineKeyboardButton(text=f"26-35 {age_emoji[2]}",
                                callback_data="choose_age_35")

    btn4 = InlineKeyboardButton(text=f"36-45 {age_emoji[3]}",
                                callback_data="choose_age_45")

    btn5 = InlineKeyboardButton(text=f"45+ {age_emoji[4]}",
                                callback_data="choose_age_45+")

    menu.row(btn1)
    menu.row(btn2, btn3, btn4)
    menu.row(btn5)

    btn9 = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                callback_data="change_the_second_q")

    menu.add(btn9)
    return menu


def create_style_buttons():
    menu = InlineKeyboardMarkup(row_width=3)
    btn1 = InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ ü•ò",
                                callback_data="choose_style_–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ")

    btn2 = InlineKeyboardButton(text="–î–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ ü•ó",
                                callback_data="choose_style_–î–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ")

    menu.row(btn1, btn2)

    back_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                    callback_data="choose_sex_return")
    menu.add(back_btn)
    return menu

def create_ccal_buttons():
    menu = InlineKeyboardMarkup(row_width=3)
    btn1 = InlineKeyboardButton(text="<300",
                                callback_data="choose_ccal_300")

    btn2 = InlineKeyboardButton(text="<500",
                                callback_data="choose_ccal_500")

    btn3 = InlineKeyboardButton(text="<700",
                                callback_data="choose_ccal_700")
    menu.row(btn1, btn2, btn3)

    back_btn = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                    callback_data="choose_age_return")
    menu.add(back_btn)
    return menu


def skip_blacklist():
    menu = InlineKeyboardMarkup(row_width=3)
    btn1 = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå",
                                callback_data="skip_blaclist")
    menu.add(btn1)
    return menu


def skip_whitelist():
    menu = InlineKeyboardMarkup(row_width=3)
    btn1 = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå",
                                callback_data="skip_whitlist")
    menu.add(btn1)
    return menu