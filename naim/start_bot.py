from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.deep_linking import decode_payload
from config import dp, bot, db
from datetime import datetime
from waiters import waiter_start as w_start
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ webapp_config
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from webapp_config import get_webapp_url

async def start_handler(message: types.Message):
    user = message.from_user.id
    user_id = str(user)
    reg_time = datetime.utcnow().replace(microsecond=0)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
    fio = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
    if fio:
        db.update_logging_session_fio(user_id, fio)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    phone = db.get_users_phone(user)
    if phone:
        db.update_logging_session_phone(user_id, phone)
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
    if db.check_basket_exists(user):
        db.set_basket(user, "{}")
    else:
        db.create_basket(user)
    if not db.check_users_user_exists(user):
        db.add_users_user(
            user,
            f'tg://user?id={user}',
            reg_time,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        db.set_default_q1(user)
        db.set_default_q2(user)
        text = f'\nüôãüèª‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å:' \
               f'\n' \
               f'\n<b>{message.from_user.first_name} {message.from_user.last_name}</b>' \
               f'\n@{message.from_user.username}' \
               f'\nid <a href="tg://user?id={user}">{user}</a>' \
               f'\n' \
               f'\n<code>{reg_time}</code>'

        # await bot.send_message(admin, text)
        db.set_users_mode(user, 0, 'start')

    # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    first = int(db.get_users_first_message(user))
    last = int(db.get_users_last_message(user))

    # –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞:
    if first != 0 and last != 0:
        for i in range(first, last + 1):
            try:
                await bot.delete_message(user, i)
            except Exception as ex:
                pass

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    db.set_users_first_message(user, 0)
    db.set_users_last_message(user, 0)

    # –î–µ–π—Å—Ç–≤–∏–µ:
    db.set_users_mode(user, 0, 'start')
    text = (f"<b>–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!\n"
            "–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑? </b>‚ò∫Ô∏èüôè")

    message_obj = await bot.send_message(
        chat_id=user,
        text=text,
        parse_mode='HTML',
        reply_markup=buttons_start_02()
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if db.get_users_temp_message_id(user) is None:
        db.set_first_temp_mes_id(user, message_obj.message_id)
    else:
        db.set_temp_users_message_id(user, message_obj.message_id)
    db.set_users_first_message(user, message_obj.message_id)
    db.set_users_last_message(user, message_obj.message_id)


@dp.message_handler(commands=['start', 'restart'])
async def start_command(message: types.Message):
    user = message.from_user.id
    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    db.start_logging_session(str(user))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = message.get_args()
    if not args:
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        db.set_qr_scanned(user, False)
        await start_handler(message)
        return

    try:
        decoded_args = decode_payload(args)
    except Exception as e:
        print(f"Error decoding args: {e}")
        await start_handler(message)
        return

    if "or" in decoded_args[:2]:
        if db.check_waiter_exists(user):
            db.clear_remark(user)
            await w_start.get_order(message, decoded_args[2:])
        else:
            await bot.send_message(chat_id=user, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç")
    elif db.check_users_user_exists(message.from_user.id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        await start_handler(message)
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        await start_handler(message)


@dp.message_handler(commands=['webapp'])
async def webapp_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App"""
    user = message.from_user.id
    
    webapp_url = get_webapp_url()
    
    text = ("<b>ÔøΩÔøΩ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!</b>\n\n"
            "–í –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üì± –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ–Ω—é –≤ —É–¥–æ–±–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ\n"
            "‚Ä¢ üõí –î–æ–±–∞–≤–ª—è—Ç—å –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
            "‚Ä¢ üìã –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã —Å QR-–∫–æ–¥–æ–º\n"
            "‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤\n"
            "‚Ä¢ ‚≠ê –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    
    keyboard = InlineKeyboardMarkup()
    webapp_button = InlineKeyboardButton(
        text="üåê –û—Ç–∫—Ä—ã—Ç—å Web App",
        web_app=WebAppInfo(url=webapp_url)
    )
    keyboard.add(webapp_button)
    
    await bot.send_message(
        chat_id=user,
        text=text,
        parse_mode='HTML',
        reply_markup=keyboard
    )


def buttons_start_02():
    menu = InlineKeyboardMarkup(row_width=1)

    btn1 = InlineKeyboardButton(text="–í –∑–∞–ª–µ üè†",
                                callback_data="order_at_rest")

    btn2 = InlineKeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöò",
                                callback_data="order_at_delivery")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Web App
    btn3 = InlineKeyboardButton(
        text="üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url=get_webapp_url())
    )

    menu.add(btn1)
    menu.add(btn2)
    menu.add(btn3)

    return menu
